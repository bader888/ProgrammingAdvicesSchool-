using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace lab
{
    class Program
    {

        static void Main()
        {
        }
        //Shared Logic
        static string filePath = "ClientsDB.txt";
        struct strClientInfo
        {
            public int PinCode;
            public double AccountBalance;
            public string AccountNumber, Name, Phone;
        }
        static strClientInfo readClientInfo()
        {
            Console.WriteLine("Please Enter Client Data: ");
            Console.WriteLine();

            strClientInfo clientInfo = new strClientInfo();

            Console.Write("Enter Account Number:");
            clientInfo.AccountNumber = Console.ReadLine();

            Console.Write("Enter Pin Code:");
            clientInfo.PinCode = int.Parse(Console.ReadLine());

            Console.Write("Enter Name:");
            clientInfo.Name = Console.ReadLine();

            Console.Write("Enter Phone:");
            clientInfo.Phone = Console.ReadLine();

            Console.Write("Enter Account Balance:");
            clientInfo.AccountBalance = double.Parse(Console.ReadLine());

            return clientInfo;
        }
        static string clientRecordForSaving(strClientInfo clientInfo)
        {
            return
                clientInfo.AccountNumber + "#//#" +
                clientInfo.PinCode + "#//#" +
                clientInfo.Name + "#//#" +
                clientInfo.Phone + "#//#" +
                clientInfo.AccountBalance;
        }
        static bool saveClientToFile(string clientRecordForSaving)
        {
            try
            {
                StreamWriter file = new StreamWriter(filePath, append: true);
                file.WriteLine(clientRecordForSaving);
                file.Close();
                return true;
            }
            catch
            {
                return false;
            }

        }
        static bool saveListToFile(List<strClientInfo> clientsList)
        {
            try
            {
                StreamWriter file = new StreamWriter(filePath);

                if (clientsList.Count == 0)
                {
                    file.Write("");
                    return true;
                }

                foreach (strClientInfo client in clientsList)
                {

                    file.WriteLine(clientRecordForSaving(client));
                    file.Close();
                }
                return true;
            }
            catch
            {
                return false;
            }

        }
        static List<strClientInfo> loadClientsFromFileToList(string filePath, string seperator)
        {
            List<strClientInfo> clientsList = new List<strClientInfo>();

            foreach (string lineData in File.ReadLines(filePath))
            {
                clientsList.Add(convertLineDataToRecord(lineData, seperator));
            }

            return clientsList;
        }
        static strClientInfo convertLineDataToRecord(string lineData, string seperator)
        {
            string[] splitedLineData = splitString(lineData, seperator);

            strClientInfo clientInfo = new strClientInfo();

            clientInfo.AccountNumber = splitedLineData[0];
            clientInfo.PinCode = int.Parse(splitedLineData[1]);
            clientInfo.Name = splitedLineData[2];
            clientInfo.Phone = splitedLineData[3];
            clientInfo.AccountBalance = double.Parse(splitedLineData[4]);

            return clientInfo;

        }
        static string[] splitString(string s, string delimeter)
        {
            List<string> result = new List<string>();

            while (s.IndexOf(delimeter) > -1)
            {
                result.Add(s.Substring(0, s.IndexOf(delimeter)).Trim());
                s = s.Remove(0, s.IndexOf(delimeter) + delimeter.Length);
            }
            result.Add(s.Trim());
            return result.ToArray();
        }
        static bool isClientExsist(string clientAccountNumber)
        {
            List<strClientInfo> clientsList = loadClientsFromFileToList(filePath, "#//#");

            foreach (strClientInfo strClientInfo in clientsList)
                if (strClientInfo.AccountNumber == clientAccountNumber)
                    return true;

            return false;
        }
        static void printTableHeader(int fileRwosCount)
        {
            string header = "Client List (" + fileRwosCount + ") Client(s).";
            Console.SetCursorPosition((Console.WindowWidth - header.Length) / 2, Console.CursorTop);
            Console.WriteLine(header);

            printBreakLine();
            Console.WriteLine();
            Console.WriteLine(
                padRight("Account Number", 20, ' ') +
                padRight("Pin Code", 20, ' ') +
                padRight("Client Name", 20, ' ') +
                padRight("Phone", 20, ' ') +
                padRight("Balance", 20, ' '));

            printBreakLine();
            Console.WriteLine();
        }
        static string padRight(string word, int numberOfFiilingCells, char fillChar)
        {
            if (word.Length >= numberOfFiilingCells)
                return word;

            for (int i = word.Length; i < numberOfFiilingCells; i++)
                word += fillChar;

            return word;
        }
        static void printBreakLine() => Console.WriteLine(padRight("_", 99, '_'));
        static void printClientData(strClientInfo client)
        {
            Console.Write(padRight(client.AccountNumber, 20, ' '));
            Console.Write(padRight(client.PinCode.ToString(), 20, ' '));
            Console.Write(padRight(client.Name, 20, ' '));
            Console.Write(padRight(client.Phone, 20, ' '));
            Console.Write(padRight(client.AccountBalance.ToString(), 20, ' '));
            Console.WriteLine();
        }

        //CRUD Operations
        static strClientInfo getClient(string accountNumber)
        {
            strClientInfo client = new strClientInfo();
            List<strClientInfo> clientsList = loadClientsFromFileToList(filePath, "#//#");

            foreach (strClientInfo clientsLine in clientsList)
                if (clientsLine.AccountNumber == accountNumber)
                {
                    client = clientsLine;
                    break;
                }
            return client;
        }
        static void printClient(string accountNumber)
        {
            Console.WriteLine("The Following are the Client Details: ");
            strClientInfo client = getClient(accountNumber);
            printClientData(client);
        }
        static void printClients()
        {
            List<strClientInfo> clientsList = loadClientsFromFileToList(filePath, "#//#");
            printTableHeader(clientsList.Count);

            foreach (strClientInfo client in clientsList)
                printClientData(client);

            Console.WriteLine();
            printBreakLine();
        }
        static bool addNewClient()
        {
            try
            {
                strClientInfo client = readClientInfo();

                if (isClientExsist(client.AccountNumber))
                {
                    Console.WriteLine("The Account Number ({0}) is used by another Client!", client.AccountNumber);
                    return false;
                }
                else
                {
                    saveClientToFile(clientRecordForSaving(client));
                    return true;
                }
            }
            catch
            {
                return false;
            }

        }
        static bool deleteClient(string accountNumber)
        {
            try
            {
                if (isClientExsist(accountNumber))
                {
                    List<strClientInfo> clientsList = loadClientsFromFileToList(filePath, "#//#");

                    List<strClientInfo> clientsListAfterDeleteTheClient = new List<strClientInfo>();

                    foreach (strClientInfo client in clientsList)
                    {
                        if (client.AccountNumber != accountNumber)
                        {
                            clientsListAfterDeleteTheClient.Add(client);
                        }
                    }

                    saveListToFile(clientsListAfterDeleteTheClient);
                    return true;
                }
                else
                {
                    Console.WriteLine("The Account Number ({0}) is Not Exsists!", accountNumber);
                    return false;
                }
            }
            catch
            {
                return false;
            }

        }
        static bool updateClient(string accountNumber, char updateConfirm)
        {
            try
            {
                if (isClientExsist(accountNumber))
                {
                    deleteClient(accountNumber);
                    addNewClient();
                    return true;
                }
                else
                {
                    Console.WriteLine("The Account Number ({0}) is Not Exsists!", accountNumber);
                    return false;
                }
            }
            catch
            {
                return false;
            }

        }
    }
}
