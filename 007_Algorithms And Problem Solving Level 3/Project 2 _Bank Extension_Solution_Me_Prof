using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace lab
{
    class Program
    {

        static void Main()
        {
            startBank();
        }
        //Shared Logic
        static string filePath = "ClientsDB.txt";
        struct strClientInfo
        {
            public int PinCode;
            public double AccountBalance;
            public string AccountNumber, Name, Phone;
        }
        static strClientInfo readClientInfo()
        {
            Console.WriteLine("Please Enter Client Data: ");
            Console.WriteLine();

            strClientInfo clientInfo = new strClientInfo();

            Console.Write("Enter Account Number:");
            clientInfo.AccountNumber = Console.ReadLine();

            Console.Write("Enter Pin Code:");
            clientInfo.PinCode = int.Parse(Console.ReadLine());

            Console.Write("Enter Name:");
            clientInfo.Name = Console.ReadLine();

            Console.Write("Enter Phone:");
            clientInfo.Phone = Console.ReadLine();

            Console.Write("Enter Account Balance:");
            clientInfo.AccountBalance = double.Parse(Console.ReadLine());

            return clientInfo;
        }
        static int readUserChoose(bool isMainMenue = true)
        {
            int to = 6;

            if (!isMainMenue)
                to = 4;

            Console.Write("Choose What do you want to Do? [1 to {0}] :", to);
            return int.Parse(Console.ReadLine());
        }
        static double readDepositAmount(string message)
        {
            Console.Write(message);
            return double.Parse(Console.ReadLine());
        }
        static string readClientAccountNumber()
        {
            Console.Write("Please Enter Account Number :");
            return Console.ReadLine();
        }
        static void goBack()
        {
            Console.WriteLine("Press any key to go back Menue...");
            Console.ReadKey();
        }
        static string clientRecordForSaving(strClientInfo clientInfo)
        {
            return
                clientInfo.AccountNumber + "#//#" +
                clientInfo.PinCode + "#//#" +
                clientInfo.Name + "#//#" +
                clientInfo.Phone + "#//#" +
                clientInfo.AccountBalance;
        }
        static bool saveClientToFile(string clientRecordForSaving)
        {
            try
            {
                StreamWriter file = new StreamWriter(filePath, append: true);
                file.WriteLine(clientRecordForSaving);
                file.Close();
                return true;
            }
            catch
            {
                return false;
            }

        }
        static bool saveListToFile(List<strClientInfo> clientsList)
        {
            try
            {
                StreamWriter file = new StreamWriter(filePath);

                if (clientsList.Count == 0)
                {
                    file.Write("");
                    return true;
                }

                foreach (strClientInfo client in clientsList)
                {

                    file.WriteLine(clientRecordForSaving(client));
                    file.Close();
                }
                return true;
            }
            catch
            {
                return false;
            }

        }
        static List<strClientInfo> loadClientsFromFileToList(string filePath, string seperator)
        {
            List<strClientInfo> clientsList = new List<strClientInfo>();

            foreach (string lineData in File.ReadLines(filePath))
            {
                clientsList.Add(convertLineDataToRecord(lineData, seperator));
            }

            return clientsList;
        }
        static strClientInfo convertLineDataToRecord(string lineData, string seperator)
        {
            string[] splitedLineData = splitString(lineData, seperator);

            strClientInfo clientInfo = new strClientInfo();

            clientInfo.AccountNumber = splitedLineData[0];
            clientInfo.PinCode = int.Parse(splitedLineData[1]);
            clientInfo.Name = splitedLineData[2];
            clientInfo.Phone = splitedLineData[3];
            clientInfo.AccountBalance = double.Parse(splitedLineData[4]);

            return clientInfo;

        }
        static string[] splitString(string s, string delimeter)
        {
            List<string> result = new List<string>();

            while (s.IndexOf(delimeter) > -1)
            {
                result.Add(s.Substring(0, s.IndexOf(delimeter)).Trim());
                s = s.Remove(0, s.IndexOf(delimeter) + delimeter.Length);
            }
            result.Add(s.Trim());
            return result.ToArray();
        }
        static bool isClientExsist(string clientAccountNumber)
        {
            List<strClientInfo> clientsList = loadClientsFromFileToList(filePath, "#//#");

            foreach (strClientInfo strClientInfo in clientsList)
                if (strClientInfo.AccountNumber == clientAccountNumber)
                    return true;

            return false;
        }
        static void printTableHeader(int fileRwosCount)
        {
            string header = "Client List (" + fileRwosCount + ") Client(s).";
            Console.SetCursorPosition((Console.WindowWidth - header.Length) / 2, Console.CursorTop);
            Console.WriteLine(header);

            printBreakLine("_");
            Console.WriteLine();
            Console.WriteLine(
                padRight("Account Number", 20, ' ') +
                padRight("Pin Code", 20, ' ') +
                padRight("Client Name", 20, ' ') +
                padRight("Phone", 20, ' ') +
                padRight("Balance", 20, ' '));

            printBreakLine("_");
            Console.WriteLine();
        }
        static string padRight(string word, int numberOfFiilingCells, char fillChar)
        {
            if (word.Length >= numberOfFiilingCells)
                return word;

            for (int i = word.Length; i < numberOfFiilingCells; i++)
                word += fillChar;

            return word;
        }
        static void printBreakLine(string lineType) => Console.WriteLine(padRight(lineType, 99, char.Parse(lineType)));
        static void printClientData(strClientInfo client)
        {
            Console.Write(padRight(client.AccountNumber, 20, ' '));
            Console.Write(padRight(client.PinCode.ToString(), 20, ' '));
            Console.Write(padRight(client.Name, 20, ' '));
            Console.Write(padRight(client.Phone, 20, ' '));
            Console.Write(padRight(client.AccountBalance.ToString(), 20, ' '));
            Console.WriteLine();
        }

        //CRUD Operations
        static strClientInfo getClient(string accountNumber)
        {
            strClientInfo client = new strClientInfo();
            List<strClientInfo> clientsList = loadClientsFromFileToList(filePath, "#//#");

            foreach (strClientInfo clientsLine in clientsList)
                if (clientsLine.AccountNumber == accountNumber)
                {
                    client = clientsLine;
                    break;
                }
            return client;
        }
        static void printClient(string accountNumber)
        {
            printTableHeader(1);
            strClientInfo client = getClient(accountNumber);
            printClientData(client);
        }
        static void printClients()
        {
            List<strClientInfo> clientsList = loadClientsFromFileToList(filePath, "#//#");
            printTableHeader(clientsList.Count);

            foreach (strClientInfo client in clientsList)
                printClientData(client);

            Console.WriteLine();
            printBreakLine("_");
        }
        static bool addNewClient()
        {
            try
            {
                strClientInfo client = readClientInfo();


                if (isClientExsist(client.AccountNumber))
                {
                    Console.WriteLine("The Account Number ({0}) is used by another Client!", client.AccountNumber);
                    return false;
                }
                else
                {
                    saveClientToFile(clientRecordForSaving(client));
                    return true;
                }
            }
            catch
            {
                return false;
            }

        }
        static bool deleteClient(string accountNumber)
        {
            try
            {
                if (isClientExsist(accountNumber))
                {
                    List<strClientInfo> clientsList = loadClientsFromFileToList(filePath, "#//#");

                    List<strClientInfo> clientsListAfterDeleteTheClient = new List<strClientInfo>();

                    foreach (strClientInfo client in clientsList)
                    {
                        if (client.AccountNumber != accountNumber)
                        {
                            clientsListAfterDeleteTheClient.Add(client);
                        }
                    }

                    saveListToFile(clientsListAfterDeleteTheClient);
                    return true;
                }
                else
                {
                    Console.WriteLine("The Account Number ({0}) is Not Exsists!", accountNumber);
                    return false;
                }
            }
            catch
            {
                return false;
            }

        }
        static bool updateClient(string accountNumber)
        {
            try
            {
                if (isClientExsist(accountNumber))
                {
                    deleteClient(accountNumber);
                    addNewClient();
                    return true;
                }
                else
                {
                    Console.WriteLine("The Account Number ({0}) is Not Exsists!", accountNumber);
                    return false;
                }
            }
            catch
            {
                return false;
            }

        }

        // Bank Requirments
        static string[] mainMenueOptions()
        {
            string[] mainMenueOptions = new string[7];
            mainMenueOptions[0] = "Show Clients List.";
            mainMenueOptions[1] = "Add New Client.";
            mainMenueOptions[2] = "Delete Client.";
            mainMenueOptions[3] = "Update Client Info.";
            mainMenueOptions[4] = "Find Client.";
            mainMenueOptions[5] = "Transactions.";
            mainMenueOptions[6] = "Exit.";

            return mainMenueOptions;
        }
        static string[] TransactionsMenueOptions()
        {
            string[] mainMenueOptions = new string[4];
            mainMenueOptions[0] = "Deposit.";
            mainMenueOptions[1] = "Withdraw.";
            mainMenueOptions[2] = "Total Balance.";
            mainMenueOptions[3] = "Main Menue.";

            return mainMenueOptions;
        }
        static void printMainMenue()
        {
            string mainMenue = "Main Menue Screen";
            string[] menueOptions = mainMenueOptions();

            Console.SetCursorPosition((Console.WindowWidth - mainMenue.Length) / 2, Console.CursorTop);

            Console.WriteLine(mainMenue);
            printBreakLine("=");

            for (int i = 0; i < menueOptions.Length; i++)
            {
                Console.WriteLine("[{0}] " + menueOptions[i], i + 1);
            }
            printBreakLine("=");
        }
        static void printTransactionsMenue()
        {
            string mainMenue = "Transactions Menue Screen";
            string[] menueOptions = TransactionsMenueOptions();

            Console.SetCursorPosition((Console.WindowWidth - mainMenue.Length) / 2, Console.CursorTop);

            Console.WriteLine(mainMenue);
            printBreakLine("=");

            for (int i = 0; i < menueOptions.Length; i++)
            {
                Console.WriteLine("[{0}] " + menueOptions[i], i + 1);
            }
            printBreakLine("=");
        }

        // Bank Extecnsion Requirments
        static double calcTotalBalances()
        {
            double totalBalances = 0;
            List<strClientInfo> clientsList = loadClientsFromFileToList(filePath, "#//#");

            for (int i = 0; i < clientsList.Count; i++)
                totalBalances += clientsList[i].AccountBalance;

            return totalBalances;

        }
        static void deposit(string accountNumber)
        {
            strClientInfo client = getClient(accountNumber);

            if (client.AccountNumber != null)
            {
                printClient(accountNumber);

                double depositAmount = readDepositAmount("Please Enter Deposit Amount :");

                Console.Write("Are you sure to perfoem this transaction? Y/N :");

                if (Console.ReadLine().ToLower() == "y")
                {
                    client.AccountBalance += depositAmount;
                    deleteClient(accountNumber);
                    saveClientToFile(clientRecordForSaving(client));
                    Console.WriteLine("Done Successfully, The New Balance Amount is: {0}", client.AccountBalance);
                }
                else
                {
                    Console.WriteLine("canceled");
                }

            }
            else
            {
                Console.WriteLine("Invalid Account Number!");
            }
        }
        static void withDraw(string accountNumber)
        {
            strClientInfo client = getClient(accountNumber);

            if (client.AccountNumber != null)
            {
                printClient(accountNumber);

                double WithDrawAmount = readDepositAmount("Please Enter WithDraw Amount :");

                if (WithDrawAmount <= client.AccountBalance)
                {
                    Console.Write("Are you sure to perfoem this transaction? Y/N :");

                    if (Console.ReadLine().ToLower() == "y")
                    {
                        client.AccountBalance -= WithDrawAmount;
                        deleteClient(accountNumber);
                        saveClientToFile(clientRecordForSaving(client));
                        Console.WriteLine("Done Successfully, The New Balance Amount is: {0}", client.AccountBalance);
                    }
                    else
                    {
                        Console.WriteLine("canceled");
                    }

                }
                else
                {
                    Console.WriteLine("Amount Exceeds the balance, you can withdraw up to {0}.",client.AccountBalance);
                }

            }
            else
            {
                Console.WriteLine("Invalid Account Number!");
            }
        }

        static void balancesList()
        {
            double totalBalances = calcTotalBalances();
            printClients();
            Console.WriteLine("Total Balances = {0}", totalBalances);
            Console.WriteLine();
        }
        static void transactions()
        {
            int userChoose = 0;

            do
            {
                Console.Clear();
                printTransactionsMenue();
                userChoose = readUserChoose(false);

                switch (userChoose)
                {
                    case 1:
                        //Console.WriteLine("Deposit");
                        deposit(readClientAccountNumber());

                        goBack();
                        break;
                    case 2:
                        //Console.WriteLine("Withdraw");
                        withDraw(readClientAccountNumber());
                        goBack();
                        break;
                    case 3:
                        //Console.WriteLine("Total Balances.");
                        balancesList();
                        goBack();
                        break;
                    case 4:
                        Console.Clear();
                        startBank();
                        break;
                    default:
                        break;

                }
            } while (userChoose != 4);
        }

        //Start Here
        static void startBank()
        {
            int userChoose = 0;
            do
            {
                Console.Clear();
                printMainMenue();
                userChoose = readUserChoose();

                switch (userChoose)
                {
                    case 1:
                        printClients();
                        goBack();
                        break;
                    case 2:
                        addNewClient();
                        Console.WriteLine("Added Successfully");
                        goBack();
                        break;
                    case 3:
                        deleteClient(readClientAccountNumber());
                        Console.WriteLine("Deleted Successfully");
                        goBack();
                        break;
                    case 4:
                        updateClient(readClientAccountNumber());
                        Console.WriteLine("Updated Successfully");
                        goBack();
                        break;
                    case 5:
                        printClient(readClientAccountNumber());
                        goBack();
                        break;

                    case 6:
                        Console.Clear();
                        transactions();
                        break;

                    case 7:
                    default:
                        break;
                }


            } while (userChoose != 7);
        }
    }
}
