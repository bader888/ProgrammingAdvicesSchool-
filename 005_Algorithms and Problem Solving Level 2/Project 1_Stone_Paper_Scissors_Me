using System;
using System.Collections.Generic;
using System.Linq;

namespace lab
{
    class Program
    {
        static void Main(string[] args)
        {
            startGame();
        }
        static string playAgainUserChoice(string message)
        {
            Console.WriteLine(message);
            return Console.ReadLine();
        }
        enum enPlayerChoice { Stone, Paper, Scissors };
        enum enRoundWinner { Player1, Computer, No_Winner };
        static int readNumber(string message, int from, int to)
        {
            int number = 0;
            do
            {
                Console.WriteLine(message);
                number = int.Parse(Console.ReadLine());
            } while (!isValidNumberInRange(number, from, to));

            return number;
        }
        static bool isValidNumberInRange(int number, int from, int to) => number >= from && number <= to ? true : false;
        static void playerChoiceMenue(int roundNumber)
        {
            Console.WriteLine();
            Console.WriteLine("Round[" + roundNumber + "] begins:");
            Console.WriteLine();
            Console.WriteLine("Your Choice: [1] Stone, [2]:Paper, [3] Scissors?");
        }
        static int generateRandomNumber()
        {
            Random random = new Random();
            return random.Next(1, 3);
        }
        static enPlayerChoice mappingPlayerChoice(int playerChoice)
        {
            if (playerChoice == 1)
                return enPlayerChoice.Stone;
            else if (playerChoice == 2)
                return enPlayerChoice.Paper;
            else
                return enPlayerChoice.Scissors;
        }
        static enPlayerChoice computerChoice() => mappingPlayerChoice(generateRandomNumber());
        static enRoundWinner roundWinner(enPlayerChoice Player1Choice, enPlayerChoice computerChoice)
        {
            if (Player1Choice == computerChoice)
                return enRoundWinner.No_Winner;
            else if (Player1Choice == enPlayerChoice.Stone && computerChoice == enPlayerChoice.Scissors ||
                     Player1Choice == enPlayerChoice.Paper && computerChoice == enPlayerChoice.Stone ||
                     Player1Choice == enPlayerChoice.Scissors && computerChoice == enPlayerChoice.Paper)
                return enRoundWinner.Player1;
            else
                return enRoundWinner.Computer;

        }
        static void PlayGame(int Player1Rounds)
        {
            for (int i = 1; i <= Player1Rounds; i++)
            {
                playerChoiceMenue(i);
                enPlayerChoice Player1Choice = mappingPlayerChoice(readNumber("Enter a Valid Number Between 1 and 3: ", 1, 3)),
                               computerChoissse = computerChoice();

                enRoundWinner RoundWinner = roundWinner(Player1Choice, computerChoissse);

                Console.WriteLine();
                Console.WriteLine("__________Round [{0}]__________", i);
                Console.WriteLine("Player1 Choice : {0}", Player1Choice);
                Console.WriteLine("Computer Choice is: {0}", computerChoissse);
                Console.WriteLine("Round Winner : {0}", RoundWinner);
                Console.WriteLine("_______________________________");

                changeBackGroundColor(RoundWinner);

                lstOfGameReport.Add(RoundWinner);
            }
        }
        static void changeBackGroundColor(enRoundWinner roundWinner)
        {
            if (roundWinner == enRoundWinner.Player1)
                Console.BackgroundColor = ConsoleColor.Green;
            else if (roundWinner == enRoundWinner.Computer)
                Console.BackgroundColor = ConsoleColor.Red;
            else
                Console.BackgroundColor = ConsoleColor.Yellow;
        }
        static List<enRoundWinner> lstOfGameReport = new List<enRoundWinner>();
        static void printFinalGameReport(List<enRoundWinner> lstOfGameReport)
        {
            Console.WriteLine("______________________________________________");
            Console.WriteLine();
            Console.WriteLine("           +++ G  a  m  e    O  v  e  r +++   ");
            Console.WriteLine("______________________________________________");
            Console.WriteLine();
            Console.WriteLine("____________ [Game Results] __________________");

            Console.WriteLine("Game Rounds:        {0}", lstOfGameReport.Count);
            Console.WriteLine("Player1 won times:  {0}", lstOfGameReport.Where(e => e == enRoundWinner.Player1).Count());
            Console.WriteLine("Computer won times: {0}", lstOfGameReport.Where(e => e == enRoundWinner.Computer).Count());
            Console.WriteLine("Draw times:         {0}", lstOfGameReport.Where(e => e == enRoundWinner.No_Winner).Count());


            enRoundWinner winner = enRoundWinner.No_Winner;

            if (lstOfGameReport.Where(e => e == enRoundWinner.Computer).Count() !=
                lstOfGameReport.Where(e => e == enRoundWinner.Player1).Count())
            {
                if (lstOfGameReport.Where(e => e == enRoundWinner.Computer).Count() >
                lstOfGameReport.Where(e => e == enRoundWinner.Player1).Count())
                {
                    winner = enRoundWinner.Computer;
                }
                else
                {
                    winner = enRoundWinner.Player1;
                }
            }

            Console.WriteLine("Final Winner: {0}", winner);
            Console.WriteLine("_____________________________________________________");
        }
        static void startGame()
        {
            string playAnotherGame = "";
            do
            {
                int Player1Rounds = readNumber("How Many Rounds 1 to 10?", 1, 10);
                PlayGame(Player1Rounds);
                printFinalGameReport(lstOfGameReport);

                playAnotherGame = playAgainUserChoice("Do you want to play again? Y/N?");
                if (playAnotherGame == "y")
                {
                    Console.Clear();
                    lstOfGameReport.Clear();
                }
            } while (playAnotherGame == "y");

        }
    }
}
