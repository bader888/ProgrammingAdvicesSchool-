  using System;

namespace lab
{
    class Program
    {
        static void Main()
        {
            printFinalResult();
        }
        struct Date
        {
            public int day, month, year;
        }
        static int readNumber(string dateSection)
        {
            Console.Write("Please enter a {0}: ", dateSection);
            return int.Parse(Console.ReadLine());
        }
        static Date readDate()
        {
            Date date = new Date();

            date.day = readNumber("day");
            date.month = readNumber("month");
            date.year = readNumber("year");

            return date;
        }
        static bool isLeapYear(int year) =>
            ((year % 400 == 0) || (year % 4 == 0 && year % 100 != 0)) ? true : false;
        static int numberDaysInAMonth(int year, int monthNumber)
        {
            int[] NumberOfMonthDays = new int[] { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

            return monthNumber == 2 ? (isLeapYear(year) ? 29 : 28) : NumberOfMonthDays[monthNumber - 1];
        }
        static bool isLastDayInMonth(Date date) =>
            date.day == numberDaysInAMonth(date.year, date.month) ? true : false;
        static bool isDate1LessThanDate2(Date date1, Date date2) =>
             (date1.year < date2.year) ? true : ((date1.year == date2.year) ?
            (date1.month < date2.month ? true :
            (date1.month == date2.month ?
            date1.day < date2.day : false)) : false);
        static bool isLastMonthInYear(int Month)
        {
            return (Month == 12);
        }
        static Date increaseDateByOneDay(Date date)
        {
            if (isLastDayInMonth(date))
            {
                if (isLastMonthInYear(date.month))
                {
                    date.month = 1;
                    date.day = 1;
                    date.year++;
                }
                else
                {
                    date.day = 1;
                    date.month++;
                }
            }
            else
            {
                date.day++;
            }
            return date;
        }
        static int indexOfDay(int day, int month, int year)
        {
            int a = (14 - month) / 12,
                y = year - a,
                m = month + (12 * a) - 2;

            return (day + y + (y / 4) - (y / 100) + (y / 400) + ((31 * m) / 12)) % 7;
        }
        static int indexOfDay(Date date) => indexOfDay(date.day, date.month, date.year);
        static bool isWeekEndDay(Date date) => (indexOfDay(date) == 5 || indexOfDay(date) == 6);
        static int calcVacationDays(Date dateFrom, Date dateTo)
        {
            int DaysCount = 0;
            while (isDate1LessThanDate2(dateFrom, dateTo))
            {
                if (!isWeekEndDay(dateFrom))
                    DaysCount++;
                dateFrom = increaseDateByOneDay(dateFrom);
            }
            return DaysCount;
        }
        static string dayShortName(int dayOfWeekOrder)
        {
            string[] arrDayNames = new string[] { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
            return arrDayNames[dayOfWeekOrder];
        }
        static void printFinalResult()
        {
            Console.WriteLine("Vacation Starts: ");
            Date vacationStarts = readDate();
            Console.WriteLine();

            Console.WriteLine("Vacation Ends: ");
            Date vacationEnds = readDate();
            Console.WriteLine();

            Console.WriteLine("Vacation From: {0}, {1}/{2}/{3}",
                dayShortName(indexOfDay(vacationStarts)), vacationStarts.day, vacationStarts.month, vacationStarts.year);
            Console.WriteLine("Vacation To: {0}, {1}/{2}/{3}",
                dayShortName(indexOfDay(vacationEnds)), vacationEnds.day, vacationEnds.month, vacationEnds.year);
            Console.WriteLine();

            int vacationDays = calcVacationDays(vacationStarts, vacationEnds);
            Console.WriteLine("Actual vacation Days: {0}", vacationDays);

        }
    }
}
