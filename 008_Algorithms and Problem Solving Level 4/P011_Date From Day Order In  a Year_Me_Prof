using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace lab
{
    class Program
    {
        static void Main()
        {
            int day = readNumber("Please enter a day Number: "),
                 month = readNumber("Please enter a month Number: "),
                 year = readNumber("Please enter a year Number: "),
                 totalDay = totalDayFromTheBeggingOfYear(day, month, year);


            Console.WriteLine("Number of days from the begging of the year [{0}] is: {1}", year, totalDay);

            printDate(dayOrderToDate(year, totalDay), totalDay);
        }
        struct Date
        {
            public int day, month, year;
        }
        static int readNumber(string msg)
        {
            Console.Write(msg);
            return int.Parse(Console.ReadLine());
        }
        static bool isLeapYear(int year) =>
            ((year % 400 == 0) || (year % 4 == 0 && year % 100 != 0)) ? true : false;
        static int numberDaysInAMonth(int year, int monthNumber)
        {
            int[] NumberOfMonthDays = new int[] { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

            return monthNumber == 2 ? (isLeapYear(year) ? 29 : 28) : NumberOfMonthDays[monthNumber - 1];
        }
        static int totalDayFromTheBeggingOfYear(int day, int month, int year)
        {
            int totalDayFromTheBeggingOfYear = 0;

            for (int i = 1; i < month; i++)
            {
                totalDayFromTheBeggingOfYear += numberDaysInAMonth(year, i);
            }

            totalDayFromTheBeggingOfYear += day;

            return totalDayFromTheBeggingOfYear;
        }
        static Date dayOrderToDate(int year, int totalDayFromTheBeggingOfYear)
        {
            Date date = new Date();

            int remainingDays = totalDayFromTheBeggingOfYear;
            int MonthDays = 0;
            date.month = 1;

            while (true)
            {
                MonthDays = numberDaysInAMonth(year, date.month);

                if (remainingDays > MonthDays)
                {
                    remainingDays -= MonthDays;
                    date.month++;
                }
                else
                {
                    date.day = remainingDays;
                    break;
                }
            }

            return date;
        }
        static void printDate(Date date, int totalDaysToDate) =>
            Console.WriteLine("Date for [{0}] is: {1}/{2}/{3}", totalDaysToDate, date.day, date.month, date.year);
    }
}
