using System;

namespace lab
{
    class Program
    {
        static void Main()
        {
            printFinalResult();
        }
        enum enDateCompare { Before = -1, Equal = 0, After = 1}
        struct Date
        {
            public int day, month, year;
        }
        struct DatePeriod
        {
            public Date StartDate, EndDate;
        }
        static int readNumber(string dateSection)
        {
            Console.Write("Please enter a {0}: ", dateSection);
            return int.Parse(Console.ReadLine());
        }
        static Date readDate(string msg)
        {
            Console.WriteLine(msg);

            Date date = new Date();

            date.day = readNumber("day");
            date.month = readNumber("month");
            date.year = readNumber("year");

            Console.WriteLine();

            return date;
        }
        static DatePeriod readDatePeriod(int periodNumber)
        {
            Console.WriteLine("Enter Period {0}:", periodNumber);
            Console.WriteLine();

            DatePeriod datePeriod = new DatePeriod();

            datePeriod.StartDate = readDate("Enter Start Date: ");
            datePeriod.EndDate = readDate("Enter End Date: ");

            return datePeriod;
        }
        static bool isFirstDayInMonth(Date date) => date.day == 1 ? true : false;
        static bool isFirstMonthInYear(int Month) => Month == 1 ? true : false;
        static bool isLeapYear(int year) =>
           ((year % 400 == 0) || (year % 4 == 0 && year % 100 != 0)) ? true : false;
        static int numberDaysInAMonth(int year, int monthNumber)
        {
            int[] NumberOfMonthDays = new int[] { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

            return monthNumber == 2 ? (isLeapYear(year) ? 29 : 28) : NumberOfMonthDays[monthNumber - 1];
        }
        static bool isLastDayInMonth(Date date) =>
           date.day == numberDaysInAMonth(date.year, date.month) ? true : false;
        static bool isLastMonthInYear(int Month)
        {
            return (Month == 12);
        }
        static Date decreaseDateByOneDay(Date date)
        {
            if (isFirstDayInMonth(date))
            {
                if (isFirstMonthInYear(date.month))
                {
                    date.day = 31;
                    date.month = 12;
                    date.year--;
                }
                else
                {
                    date.month--;
                    date.day = numberDaysInAMonth(date.year, date.month);
                }
            }
            else
            {
                date.day--;
            }
            return date;
        }
        static Date increaseDateByOneDay(Date date)
        {
            if (isLastDayInMonth(date))
            {
                if (isLastMonthInYear(date.month))
                {
                    date.month = 1;
                    date.day = 1;
                    date.year++;
                }
                else
                {
                    date.day = 1;
                    date.month++;
                }
            }
            else
            {
                date.day++;
            }
            return date;
        }
        static bool isDate1BeforeDate2(Date date1, Date date2) =>
             (date1.year < date2.year) ? true : ((date1.year == date2.year) ?
            (date1.month < date2.month ? true :
            (date1.month == date2.month ?
            date1.day < date2.day : false)) : false);
        static bool isDate1EqualDate2(Date date1, Date date2) =>
            date1.year == date2.year &&
            date1.month == date2.month &&
            date1.day == date2.day ? true : false;
        static bool isPeriodIncludeDate(DatePeriod period, Date date) =>
                compareDates(date, decreaseDateByOneDay(period.StartDate)) == enDateCompare.After &&
                compareDates(date, increaseDateByOneDay(period.EndDate)) == enDateCompare.Before ? true : false;
        static bool isOverLapsPeriods(DatePeriod period1, DatePeriod period2) =>
               isPeriodIncludeDate(period1, period2.StartDate) ||
                isPeriodIncludeDate(period1, period2.EndDate) ||
                isPeriodIncludeDate(period2, period1.StartDate) ||
                isPeriodIncludeDate(period2, period1.EndDate) ? true : false;
        static enDateCompare compareDates(Date date1, Date date2)
        {
            if (isDate1BeforeDate2(date1, date2))
                return enDateCompare.Before;
            else if (isDate1EqualDate2(date1, date2))
                return enDateCompare.Equal;
            else
                return
                    enDateCompare.After;
        }
        static void printFinalResult()
        {
            DatePeriod period1 = readDatePeriod(1),
                period2 = readDatePeriod(2);

            if (isOverLapsPeriods(period1, period2))
                Console.WriteLine("Yes, Periods Overlaps.");
            else
                Console.WriteLine("No, Periods are Not Overlaps.");
        }
    }
}
